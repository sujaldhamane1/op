SLIP 22

q1 1

import numpy as np
import matplotlib.pyplot as plt

x_values = np.linspace(-5*np.pi, 5*np.pi, 1000)

y_values = np.log(x_values**2) + np.sin(x_values)

plt.plot(x_values, y_values, label='$y = \log(x^2) + \sin(x)$')

plt.xlabel('x')
plt.ylabel('y')
plt.title('Plot of $y = \log(x^2) + \sin(x)$ over $[-5\pi, 5\pi]$')
plt.legend()

plt.grid(True)
plt.show()


q1  2

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

x = np.linspace(-6, 6, 100)
y = np.linspace(-6, 6, 100)
x, y = np.meshgrid(x, y)

z = x*2 + y*2

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

contour = ax.contour3D(x, y, z, 50, cmap='viridis')

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
plt.title('3D Contour Plot of z = x^2 + y^2')

plt.show()


*Q2 1*

import numpy as np

A = np.array([0, 0])
B = np.array([2, 2])
C = np.array([0, 2])

def angle_between(v1, v2):
    dot_product = np.dot(v1, v2)
    norms_product = np.linalg.norm(v1) * np.linalg.norm(v2)
    cos_theta = dot_product / norms_product
    angle_rad = np.arccos(np.clip(cos_theta, -1.0, 1.0))
    angle_deg = np.degrees(angle_rad)
    return angle_deg

AB = B - A
BC = C - B
CA = A - C

angle_A = angle_between(AB, -CA)
angle_B = angle_between(BC, -AB)
angle_C = angle_between(CA, -BC)

print("Angle at vertex A:", angle_A)
print("Angle at vertex B:", angle_B)
print("Angle at vertex C:", angle_C)



*Q2 2*

import numpy as np

P = np.array([3, 6])

a, b, c = 1, -2, 4

def reflection_through_line(point, line_coeffs):
    a, b, c = line_coeffs
    x0, y0 = point
    d = (a*x0 + b*y0 + c) / (a*2 + b*2)
    x_reflection = x0 - 2*a*d
    y_reflection = y0 - 2*b*d
    return np.array([x_reflection, y_reflection])

reflection_point = reflection_through_line(P, [a, b, c])
print("Reflection of point P[3, 6] through the line x - 2y + 4 = 0 is:", reflection_point)


*Q3 1*


from scipy.optimize import linprog

c = [-4, -1, -3, -5]

A = [[-4, -6, 5, 4],   
     [3, 2, -4, -1],   
     [8, 3, -3, -2]]   

b = [-20, 10, 20]

x_bounds = (0, None)
y_bounds = (0, None)
z_bounds = (0, None)
w_bounds = (0, None)

res = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds, z_bounds, w_bounds], method='highs')

print('Optimal value of Z:', -res.fun)
print('Optimal values of x, y, z, w:', res.x)


*Q3 2*


import numpy as np

def rotate_point(point, center, angle):
    x, y = point
    cx, cy = center
    rotated_x = np.cos(angle) * (x - cx) - np.sin(angle) * (y - cy) + cx
    rotated_y = np.sin(angle) * (x - cx) + np.cos(angle) * (y - cy) + cy
    return (rotated_x, rotated_y)

point = (1, 1)
center = (1, 4)
angle = np.pi / 2

rotated_point = rotate_point(point, center, angle)
print("Rotated point:", rotated_point)


import numpy as np

# Function to calculate distance between two points
def distance_between_points(point1, point2):
    x1, y1 = point1
    x2, y2 = point2
    return np.sqrt((x2 - x1)*2 + (y2 - y1)*2)

# Given points
point1 = (0, 0)
point2 = (1, 0)

# Calculate distance
distance = distance_between_points(point1, point2)
print("Distance between points:", distance)


# Given point
point = (3, 4)
shearing_factor = 3

# Shear the point in X direction
sheared_point = (point[0] + shearing_factor * point[1], point[1])

print("Sheared point:", sheared_point)


# Function to represent 2D points
def point(x, y):
    return (x, y)

# Given point
p = point(-2, 5)
print("Given point:", p)
