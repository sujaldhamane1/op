#s1q1a
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-1, 1, 100)
plt.plot(x, x**2, label='f(x) = x^2')
plt.plot(x, x**3, label='g(x) = x^3')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Graphs of f(x) = x^2 and g(x) = x^3')
plt.legend()
plt.grid(True)
plt.show()

#s1q1b
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(-5, 5, 100)
y = np.exp(-x**2)
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot(x, y, zs=0, zdir='z', linestyle='--', color='g', marker='^')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
plt.show()


#s1q2a
def reflect_point(point, line):
    x, y = point
    a, b, c = line
    x_reflected = ((b*2 - a2) * x - 2 * a * b * y - 2 * a * c) / (a2 + b*2)
    y_reflected = ((a*2 - b2) * y - 2 * a * b * x - 2 * b * c) / (a2 + b*2)
    return [x_reflected, y_reflected]
def reflect_segment(A, B, line):
    reflected_A = reflect_point(A, line)
    reflected_B = reflect_point(B, line)
    return reflected_A, reflected_B
A = [5, 3]
B = [1, 4]
line = [1, -1, -1]  # y = x + 1
reflected_A, reflected_B = reflect_segment(A, B, line)
print("Reflected point A:", reflected_A)
print("Reflected point B:", reflected_B)

#s1q2b
import matplotlib.pyplot as plt
import numpy as np
vertices = np.array([[0, 0], [2, 0], [2, 3], [1, 6]])
plt.plot(vertices[:, 0], vertices[:, 1], 'b-', label='Original Polygon')
rotated_vertices = np.dot(vertices, np.array([[-1, 0], [0, -1]]))
plt.plot(rotated_vertices[:, 0], rotated_vertices[:, 1], 'r-', label='Rotated Polygon (180 degrees)')
plt.legend()
plt.axis('equal')
plt.show()


#s1q3ai
!pip install pulp
import pulp
prob = pulp.LpProblem("Maximize_Z", pulp.LpMaximize)
x = pulp.LpVariable('x', lowBound=0, cat='Continuous')
y = pulp.LpVariable('y', lowBound=0, cat='Continuous')
prob += 150*x + 75*y, "Objective"
prob += 4*x + 6*y <= 24
prob += 5*x + 3*y <= 15
prob.solve()
print("Status:", pulp.LpStatus[prob.status])
print("Maximum Z:", pulp.value(prob.objective))
print("Optimal values:")
for v in prob.variables():
    print(v.name, "=", v.varValue)

#s1q3bi
P = [3, -1]
reflection_X_axis = [P[0], -P[1]]
scaling_X = [2 * P[0], P[1]]
scaling_Y = [P[0], 1.5 * P[1]]
reflection_line_y_equals_x = [P[1], P[0]]
print("Reflection through X-axis:", reflection_X_axis)
print("Scaling in X-coordinate by factor 2:", scaling_X)
print("Scaling in Y-coordinate by factor 1.5:", scaling_Y)
print("Reflection through the line y = x:", reflection_line_y_equals_x)
