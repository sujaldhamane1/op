slip 14

q11

import numpy as np
import matplotlib.pyplot as plt

# Define the functions
def f(x):
    return x ** 2

def g(x):
    return x ** 3

# Generate x values
x = np.linspace(-1, 1, 100)

# Plot the functions
plt.plot(x, f(x), label='f(x) = x^2')
plt.plot(x, g(x), label='g(x) = x^3')

# Add labels and legend
plt.xlabel('x')
plt.ylabel('y')
plt.title('Plot of f(x) = x^2 and g(x) = x^3')
plt.legend()

# Show the plot
plt.grid(True)
plt.show()

q12
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define the function
def f(x):
    return np.exp(-x ** 2)

# Generate x values
x = np.linspace(-5, 5, 100)

# Generate y values
y = f(x)

# Plot the function
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.plot(x, y, zs=0, zdir='z', linestyle='--', marker='^', color='g')

# Add labels and title
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('3D Plot of f(x) = e^(-x^2)')

plt.show()

q21

import numpy as np
import matplotlib.pyplot as plt

# Define the line reflection function
def reflect_point(point, line_slope, line_intercept):
    x, y = point
    # Calculate the perpendicular distance from the point to the line
    distance = (x + line_slope * y - line_slope * line_intercept) / (1 + line_slope ** 2)
    # Calculate the reflected point
    x_reflected = 2 * distance - x
    y_reflected = 2 * distance * line_slope - y + 2 * line_intercept
    return [x_reflected, y_reflected]

# Define the points A and B
A = [5, 3]
B = [1, 4]

# Define the line y = x + 1
line_slope = 1
line_intercept = 1

# Reflect the points A and B through the line
A_reflected = reflect_point(A, line_slope, line_intercept)
B_reflected = reflect_point(B, line_slope, line_intercept)

# Plot the original and reflected line segments
plt.plot([A[0], B[0]], [A[1], B[1]], label='Original Line Segment AB')
plt.plot([A_reflected[0], B_reflected[0]], [A_reflected[1], B_reflected[1]], label='Reflected Line Segment A\'B\'')
plt.plot([A[0], A_reflected[0]], [A[1], A_reflected[1]], 'k--')  # Dotted line to show reflection
plt.plot([B[0], B_reflected[0]], [B[1], B_reflected[1]], 'k--')  # Dotted line to show reflection

# Plot the line y = x + 1
x_vals = np.linspace(-1, 6, 100)
plt.plot(x_vals, x_vals + 1, 'r--', label='Line y = x + 1')

plt.xlabel('x')
plt.ylabel('y')
plt.title('Reflection of Line Segment AB through y = x + 1')
plt.legend()
plt.grid(True)
plt.axis('equal')
plt.show()

q22
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon
from matplotlib.transforms import Affine2D

# Define the vertices of the polygon
vertices = np.array([[0, 0], [2, 0], [2, 3], [1, 6]])

# Create a Polygon patch
polygon = Polygon(vertices, closed=True)

# Create a figure and axis
fig, ax = plt.subplots()

# Add the polygon patch to the axis
ax.add_patch(polygon)

# Rotate the polygon by 180 degrees
rotation = Affine2D().rotate_deg(180)
polygon.set_transform(rotation + ax.transData)

# Set axis limits
ax.set_xlim(-1, 3)
ax.set_ylim(-1, 7)

# Set labels and title
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_title('Polygon Rotated by 180 Degrees')

plt.grid(True)
plt.show()

q31
from scipy.optimize import linprog

# Coefficients of the objective function
c = [-150, -75]  # Coefficients are negated for maximization

# Coefficients of the inequality constraints (left-hand side)
A = [[4, 6], [5, 3]]  # Coefficients of x and y in each inequality constraint

# Right-hand side of the inequality constraints
b = [24, 15]  # Values on the right-hand side of each inequality

# Bounds for variables x and y
x_bounds = (0, None)  # Lower bound for x is 0, upper bound is infinity
y_bounds = (0, None)  # Lower bound for y is 0, upper bound is infinity

# Solve the linear programming problem
result = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds], method='highs')

# Print the results
print("Optimal value of Z:", -result.fun)  # Since linprog minimizes by default, negate the result for maximization
print("Optimal values of x and y:", result.x)

q3b1
# Define the original point P
P = [2, -3]

# I. Reflection through the X-axis
P_reflection_x = [P[0], -P[1]]
print("Reflection through X-axis:", P_reflection_x)

# II. Scaling in the X-coordinate by factor 2
P_scaling_x = [P[0] * 2, P[1]]
print("Scaling in X-coordinate by factor 2:", P_scaling_x)

# III. Scaling in the Y-coordinate by factor 1.5
P_scaling_y = [P[0], P[1] * 1.5]
print("Scaling in Y-coordinate by factor 1.5:", P_scaling_y)

# IV. Reflection through the line y = x
P_reflection_y_equals_x = [P[1], P[0]]
print("Reflection through the line y = x:", P_reflection_y_equals_x)
