Slip 13

Q11
import numpy as np
import matplotlib.pyplot as plt

# Define the functions f(x) and g(x)
def f(x):
    return x ** 2

def g(x):
    return x ** 3

# Generate x values
x_values = np.linspace(-1, 1, 100)

# Compute y values for f(x) and g(x)
f_values = f(x_values)
g_values = g(x_values)

# Plot f(x) and g(x)
plt.figure(figsize=(8, 6))
plt.plot(x_values, f_values, label='f(x) = x^2')
plt.plot(x_values, g_values, label='g(x) = x^3')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Graph of f(x) = x^2 and g(x) = x^3')
plt.legend()
plt.grid(True)
plt.show()

Q12

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Generate x and y values
x = np.linspace(-6, 6, 100)
y = np.linspace(-6, 6, 100)
X, Y = np.meshgrid(x, y)

# Compute z values for the parabola z = x^2 + y^2
Z = X ** 2 + Y ** 2

# Plot the surface plot
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('Surface plot of z = x^2 + y^2')
plt.show()

Q21

import numpy as np
import matplotlib.pyplot as plt

# Triangle ABC vertices
A = np.array([1, 0])
B = np.array([2, -1])
C = np.array([-1, 3])

# Define the line y = 3
y_line = 3

# Reflecting function
def reflect(point, line):
    return np.array([point[0], 2 * line - point[1]])

# Reflect vertices of triangle ABC through the line y = 3
A_reflected = reflect(A, y_line)
B_reflected = reflect(B, y_line)
C_reflected = reflect(C, y_line)

# Plot the original and reflected triangles
plt.figure(figsize=(8, 6))
plt.plot([A[0], B[0], C[0], A[0]], [A[1], B[1], C[1], A[1]], 'b-', label='Triangle ABC')
plt.plot([A_reflected[0], B_reflected[0], C_reflected[0], A_reflected[0]], [A_reflected[1], B_reflected[1], C_reflected[1], A_reflected[1]], 'r--', label='Reflected Triangle ABC')
plt.axhline(y=y_line, color='k', linestyle='--', label='Reflection Line y = 3')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Reflection of Triangle ABC through y = 3')
plt.legend()
plt.grid(True)
plt.show()

Q22

import numpy as np

# Triangle vertices
A = np.array([0, 0])
B = np.array([5, 0])
C = np.array([3, 3])

# Distance between two points
def distance(point1, point2):
    return np.linalg.norm(point2 - point1)

# Calculate distances between vertices
side_AB = distance(A, B)
side_BC = distance(B, C)
side_CA = distance(C, A)

# Calculate perimeter
perimeter = side_AB + side_BC + side_CA

# Calculate area using Heron's formula
s = perimeter / 2  # Semiperimeter
area = np.sqrt(s * (s - side_AB) * (s - side_BC) * (s - side_CA))

print("Area of triangle ABC:", area)
print("Perimeter of triangle ABC:", perimeter)

Q31
import numpy as np
from scipy.optimize import linprog

c = [-5, -3]
A = [[1, 1], [2, 5]]
b = [7, 1]
x_bounds = (0, None)
y_bounds = (0, None)

res = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds], method='highs')

if res.success:
    print("Optimal solution:")
    print("x =", res.x[0])
    print("y =", res.x[1])
    print("Optimal value of Z:", -res.fun)
else:
    print("No optimal solution found.")

Q3b1

import numpy as np

point = np.array([-2, 4])

def shearing_y_direction(point, units):
    return np.array([point[0], point[1] + units * point[0]])

def scaling(point, scale_x, scale_y):
    return np.array([point[0] * scale_x, point[1] * scale_y])

def shearing_xy_direction(point, shear_x, shear_y):
    return np.array([point[0] + shear_x * point[1], point[1] + shear_y * point[0]])

def rotation(point, angle_degrees):
    angle_radians = np.radians(angle_degrees)
    rotation_matrix = np.array([[np.cos(angle_radians), -np.sin(angle_radians)],
                                [np.sin(angle_radians), np.cos(angle_radians)]])
    return np.dot(rotation_matrix, point)

sheared_y_point = shearing_y_direction(point, 7)
scaled_point = scaling(point, 7/2, 7)
sheared_xy_point = shearing_xy_direction(point, 4, 7)
rotated_point = rotation(point, 60)

print("(I) Shearing in Y direction by 7 units:", sheared_y_point)
print("(II) Scaling in X and Y direction by 7/2 and 7 units respectively:", scaled_point)
print("(III) Shearing in X and Y direction by 4 and 7 units respectively:", sheared_xy_point)
print("(IV) Rotation about origin by an angle 60 degrees:",Â rotated_point)
