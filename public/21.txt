SLIP 21


*Q1 1*

import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**4

x_values = np.linspace(0, 5, 100)

y_values = f(x_values)

plt.plot(x_values, y_values, 'r--', marker='o', markersize=5)

plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('Graph of f(x) = x^4')

plt.grid(True)
plt.show()


*Q1 2*

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def f(x, y):
    return x*2 + y*2

x = np.linspace(-6, 6, 100)
y = np.linspace(-6, 6, 100)
x, y = np.meshgrid(x, y)

z = f(x, y)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

surf = ax.plot_surface(x, y, z, cmap='viridis')

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
plt.title('3D Plot of z = x^2 + y^2')

plt.show()

*Q2 1*

import numpy as np

T = np.array([[2, 3], [4, 1]])

A = np.array([2, 5])
B = np.array([4, -13])

A_prime = np.dot(T, A)
B_prime = np.dot(T, B)

slope_AB = (B_prime[1] - A_prime[1]) / (B_prime[0] - A_prime[0])

midpoint_AB = (A_prime + B_prime) / 2

print("Transformed coordinates of A':", A_prime)
print("Transformed coordinates of B':", B_prime)
print("Slope of the transformed line segment A'B':", slope_AB)
print("Midpoint of the transformed line segment A'B':", midpoint_AB)

*Q2 2*

import numpy as np
import matplotlib.pyplot as plt

vertices = np.array([[4, 4], [2, 4], [2, 2], [4, 2], [4, 4]])

plt.plot(vertices[:, 0], vertices[:, 1], 'b-', label='Original Square')

centroid = np.mean(vertices, axis=0)

expanded_vertices = centroid + 3 * (vertices - centroid)

reduced_vertices = centroid + 0.4 * (vertices - centroid)

plt.plot(expanded_vertices[:, 0], expanded_vertices[:, 1], 'r--', label='Expanded Square')

plt.plot(reduced_vertices[:, 0], reduced_vertices[:, 1], 'g--', label='Reduced Square')

plt.gca().set_aspect('equal', adjustable='box')

plt.xlim(0, 8)
plt.ylim(0, 8)

plt.legend()
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Uniform Expansion and Reduction of a Square')

plt.grid(True)
plt.show()


*Q3 1*

from scipy.optimize import linprog

c = [4, 2]

A = [[1, 1], 
     [-1, 1]] 

b = [3, 2]

x_bounds = (0, None)
y_bounds = (0, None)

res = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds])

print('Optimal value of Z:', res.fun)
print('Optimal values of x and y:', res.x)


*Q3 b 2*

import numpy as np

P = np.array([-2, 4])

def reflection_through_line(point, line_coeffs):
    a, b, c = line_coeffs
    x0, y0 = point
    d = (a*x0 + b*y0 + c) / (a*2 + b*2)
    x_reflection = x0 - 2*a*d
    y_reflection = y0 - 2*b*d
    return np.array([x_reflection, y_reflection])

line_coeffs_I = [3, 4, -5]
reflection_point_I = reflection_through_line(P, line_coeffs_I)
print("Reflection through line 3x + 4y = 5:", reflection_point_I)

scaling_factor_X = 6
scaled_point_II = np.array([P[0] * scaling_factor_X, P[1]])
print("Scaling in X coordinate by factor 6:", scaled_point_II)

scaling_factor_Y = 4.1
scaled_point_III = np.array([P[0], P[1] * scaling_factor_Y])
print("Scaling in Y coordinate by factor 4.1:", scaled_point_III)

slope_perpendicular = -1 / 2
def reflection_through_line_y_eq_2x_plus_3(point, slope):
    x0, y0 = point
    x_reflection = (x0 + slope*y0 - slope*3) / (1 + slope**2)
    y_reflection = slope * x_reflection + 3
    return np.array([x_reflection, y_reflection])

reflection_point_IV = reflection_through_line_y_eq_2x_plus_3(P, slope_perpendicular)
print("Reflection through line y = 2x + 3:", reflection_point_IV)
