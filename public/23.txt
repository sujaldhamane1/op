SLIP  23

*Q1 1*

import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, np.pi, 100)

sin_values = np.sin(x)
cos_values = np.cos(x)

plt.figure(figsize=(8, 6))

plt.subplot(2, 1, 1)
plt.plot(x, sin_values, color='blue', label='sin(x)')
plt.title('Plot of sin(x)')
plt.xlabel('x')
plt.ylabel('sin(x)')
plt.grid(True)
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(x, cos_values, color='red', label='cos(x)')
plt.title('Plot of cos(x)')
plt.xlabel('x')
plt.ylabel('cos(x)')
plt.grid(True)
plt.legend()

plt.tight_layout()

plt.show()


*Q1 2*


import numpy as np
import matplotlib.pyplot as plt

def f1(x):
    return x ** 3

def f2(x):
    return x ** 2

x1 = np.linspace(0, 5, 100)
x2 = np.linspace(-2, 2, 100)

y1 = f1(x1)
y2 = f2(x2)

plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.plot(x1, y1, color='blue', label='$f(x) = x^3$')
plt.title('Plot of $f(x) = x^3$')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.grid(True)
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(x2, y2, color='red', label='$f(x) = x^2$')
plt.title('Plot of $f(x) = x^2$')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.grid(True)
plt.legend()

plt.tight_layout()

plt.show()


*Q2 1*

import numpy as np
import matplotlib.pyplot as plt

num_sides = 20

radius = 1

angles = np.linspace(0, 2 * np.pi, num_sides, endpoint=False)

x_coords = radius * np.cos(angles)
y_coords = radius * np.sin(angles)

x_coords = np.append(x_coords, x_coords[0])
y_coords = np.append(y_coords, y_coords[0])

plt.figure(figsize=(6, 6))
plt.plot(x_coords, y_coords, color='blue')
plt.axis('equal')
plt.title('Regular Polygon with 20 Sides and Radius 1')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True)
plt.show()


*Q2 2*


import matplotlib.pyplot as plt
from shapely.geometry import Polygon

vertices = [(0, 0), (1, 0), (2, 2), (1, 4)]

x_coords, y_coords = zip(*vertices)

plt.figure(figsize=(6, 6))
plt.plot(x_coords + (x_coords[0],), y_coords + (y_coords[0],), color='blue')  # Connect the last point to the first to close the polygon
plt.scatter(x_coords, y_coords, color='red')  # Plot vertices
plt.title('Polygon with Vertices (0, 0), (1, 0), (2, 2), (1, 4)')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True)
plt.show()

polygon = Polygon(vertices)
area = polygon.area
print("Area of the polygon:", area)


*Q3 1*


import numpy as np
from scipy.optimize import linprog

c = np.array([-3, -5, -4]) 

A = np.array([[2, 3, 0],
              [2, 5, 0],
              [3, 2, 4]])

b = np.array([8, 10, 15])

x_bounds = (0, None)
y_bounds = (0, None)
z_bounds = (0, None)

result = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds, z_bounds], method='highs')

print("Optimal values of x, y, z:", result.x)
print("Optimal value of the objective function (Z):", -result.fun) 


*Q3 b 1*

import numpy as np

P = np.array([3, -1])

reflection_x = np.array([P[0], -P[1]])

angle_rad = np.radians(30)
rotation_matrix = np.array([[np.cos(angle_rad), -np.sin(angle_rad)],
                            [np.sin(angle_rad), np.cos(angle_rad)]])
rotation = np.dot(rotation_matrix, P)

scaling_y = np.array([P[0], 8 * P[1]])

shearing_x = np.array([P[0] + 2 * P[1], P[1]])

print("I. Reflection through X axis:", reflection_x)
print("II. Rotation about origin by 30 degrees:", rotation)
print("III. Scaling in Y coordinate by factor 8:", scaling_y)
print("IV. Shearing in X direction by 2 units:",Â shearing_x)
