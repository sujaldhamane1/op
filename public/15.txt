slip 15

q11
# Define the vertices of the triangle
A = [0, 0]
B = [5, 0]
C = [3, 3]

# Calculate the area of the triangle using the formula
area = 0.5 * abs(A[0] * (B[1] - C[1]) + B[0] * (C[1] - A[1]) + C[0] * (A[1] - B[1]))

# Print the area of the triangle
print("Area of the triangle ABC:", area)

q12

import numpy as np
import matplotlib.pyplot as plt

# Generate x values
x = np.linspace(0, 5, 100)

# Calculate y values for each function
y_sin = np.sin(x)
y_cos = np.cos(x)
y_exp = np.exp(x)
y_x_squared = x ** 2

# Create subplots
fig, axs = plt.subplots(2, 2)

# Plot sin(x)
axs[0, 0].plot(x, y_sin, color='blue')
axs[0, 0].set_title('sin(x)')

# Plot cos(x)
axs[0, 1].plot(x, y_cos, color='red')
axs[0, 1].set_title('cos(x)')

# Plot exp(x)
axs[1, 0].plot(x, y_exp, color='green')
axs[1, 0].set_title('exp(x)')

# Plot x^2
axs[1, 1].plot(x, y_x_squared, color='purple')
axs[1, 1].set_title('x^2')

# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()

q21

import numpy as np
import matplotlib.pyplot as plt

# Define the vertices of the triangle
A = [1, 2]
B = [2, -2]
C = [-1, 2]

# Define the rotation matrix for 180 degrees
rotation_matrix = np.array([[-1, 0],
                             [0, -1]])

# Apply the rotation to each vertex
A_rotated = np.dot(rotation_matrix, A)
B_rotated = np.dot(rotation_matrix, B)
C_rotated = np.dot(rotation_matrix, C)

# Plot the original and rotated triangles
plt.plot([A[0], B[0], C[0], A[0]], [A[1], B[1], C[1], A[1]], label='Original Triangle ABC')
plt.plot([A_rotated[0], B_rotated[0], C_rotated[0], A_rotated[0]], [A_rotated[1], B_rotated[1], C_rotated[1], A_rotated[1]], label='Rotated Triangle ABC')

plt.xlabel('x')
plt.ylabel('y')
plt.title('Rotation of Triangle ABC by 180 Degrees')
plt.legend()
plt.grid(True)
plt.axis('equal')
plt.show()

q22

import numpy as np
import matplotlib.pyplot as plt

# Define the function
def f(x):
    return np.exp(x)

# Generate x values
x = np.linspace(-10, 10, 100)

# Generate y values
y = f(x)

# Plot the graph
plt.plot(x, y, label='f(x) = e^x')

plt.xlabel('x')
plt.ylabel('y')
plt.title('Graph of f(x) = e^x')
plt.legend()
plt.grid(True)
plt.show()

q31

from scipy.optimize import linprog

c = [3.5, 2]  
A = [[-1, -1], [-1, 0], [0, 1]] 
b = [-5, -4, 2]  
x_bounds = (0, None)  
y_bounds = (0, 2)      

result = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds], method='highs')

print("Optimal value of Z:", result.fun)  
print("Optimal values of x and y:", result.x)  

q3b1
import numpy as np

# Define the points A and B
A = np.array([5, 3])
B = np.array([1, 4])

# I. Rotation about origin through an angle π/2
rotation_matrix = np.array([[0, -1],
                            [1, 0]])
A_rotated = np.dot(rotation_matrix, A)
B_rotated = np.dot(rotation_matrix, B)

# II. Scaling in the x-coordinate by 5 units
A_scaled = A_rotated * 5
B_scaled = B_rotated * 5

# III. Reflection through the line y = -x
reflection_matrix = np.array([[0, -1],
                               [-1, 0]])
A_reflected = np.dot(reflection_matrix, A_scaled)
B_reflected = np.dot(reflection_matrix, B_scaled)

# Print the final positions of points A and B after all transformations
print("Final position of point A after all transformations:", A_reflected)
print("Final position of point B after all transformations:", B_reflected)
